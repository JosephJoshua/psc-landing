---
import { Icon } from 'astro-icon';
import ThemeSwitcher from '~/components/theme-switcher.astro';
import type { NavItem } from '~/types';
import ContentSection from './content-section.astro';
import ScrollUpButton from './scroll-up-button.astro';
import AppButton from './app-button.astro';
import AppLink from './app-link.astro';

const navItems: Array<NavItem> = [
  { title: 'Tentang Kami', url: '#about-us' },
  { title: 'Layanan', url: '#services' },
  { title: 'Hubungi Kami', url: '#contact-us' },
];
---

<header
  id="page-header"
  class="sticky top-0 z-20 flex w-full justify-center border-b border-transparent bg-default px-8 py-4"
>
  <ContentSection class="flex w-full items-center justify-between">
    <AppLink class="flex items-center gap-3 hover:!text-default" href="#">
      <h1 class="sr-only">Point Service Center</h1>
      <Icon name="logo" class="h-12" />
    </AppLink>

    <div>
      <div class="flex items-center gap-6">
        <nav class="hidden sm:block">
          <ul class="flex items-center gap-6">
            {
              navItems.map(({ title, url }) => (
                <li>
                  <AppLink class="text-sm" href={url}>
                    {title}
                  </AppLink>
                </li>
              ))
            }
          </ul>
        </nav>

        <AppButton id="open-nav-button" class="sm:hidden" aria-label="Navigation">
          <Icon pack="mdi" name="menu" class="h-8" />
        </AppButton>

        <ThemeSwitcher />
        <ScrollUpButton
          class="scroll-up-button -ml-14 origin-[center_right] scale-0 transition-all duration-300"
        />
      </div>

      <div id="menu-modal" class="modal hidden" aria-hidden="true">
        <div class="fixed inset-0 bg-default px-8 py-4 text-default">
          <div class="space-y-4" role="dialog" aria-modal="true">
            <header class="text-right">
              <AppButton id="close-nav-button" aria-label="Close navigation">
                <Icon pack="mdi" name="close" class="h-8" />
              </AppButton>
            </header>

            <div class="flex justify-center">
              <Icon name="logo" class="h-16" />
            </div>

            <nav>
              <ul class="flex flex-col">
                {
                  navItems.map(({ title, url }) => (
                    <li>
                      <AppLink class="block py-4 text-center text-xl" href={url}>
                        {title}
                      </AppLink>
                    </li>
                  ))
                }
              </ul>
            </nav>
          </div>
        </div>
      </div>
    </div>
  </ContentSection>
</header>

<script>
  import MicroModal from 'micromodal';
  import invariant from 'tiny-invariant';

  const menuModalId = 'menu-modal';

  const menu = document.querySelector(`#${menuModalId} ul`);
  const openNavButton = document.querySelector('#open-nav-button');
  const closeNavButton = document.querySelector('#close-nav-button');
  const scrollUpButton = document.getElementsByClassName('scroll-up-button')[0];

  invariant(menu, 'menu should not be null');
  invariant(scrollUpButton, 'scrollUpButton should not be null');
  invariant(openNavButton, 'openNavButton should not be null');
  invariant(closeNavButton, 'closeNavButton should not be null');

  const openMenu = () => {
    MicroModal.show(menuModalId, { disableScroll: true });
  };

  const closeMenu = () => {
    MicroModal.close(menuModalId);
  };

  openNavButton.addEventListener('click', openMenu);
  closeNavButton.addEventListener('click', closeMenu);

  document.addEventListener('scroll', () => {
    const force = document.documentElement.scrollTop > 200;

    scrollUpButton.classList.toggle('scale-100', force);
    scrollUpButton.classList.toggle('ml-0', force);
  });

  menu.addEventListener('click', (event) => {
    if ((event.target as HTMLElement).tagName === 'A') {
      closeMenu();
    }
  });
</script>

<noscript>
  <style>
    #open-nav-button {
      display: none;
    }
  </style>
</noscript>

<style>
  .modal.is-open {
    @apply block;
  }
</style>
